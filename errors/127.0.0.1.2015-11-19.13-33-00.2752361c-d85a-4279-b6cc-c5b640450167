(dp1
S'output'
p2
S"<type 'exceptions.SyntaxError'> Error in URI 'google:datastore' or database not supported"
p3
sS'layer'
p4
S'/home/will/web2py/applications/true_review/models/tables.py'
p5
sS'code'
p6
S"#########################################################################\n## Define your tables below; for example\n##\n## >>> db.define_table('mytable',Field('myfield','string'))\n##\n## Fields can be 'string','text','password','integer','double','boolean'\n##       'date','time','datetime','blob','upload', 'reference TABLENAME'\n## There is an implicit 'id integer autoincrement' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield='value')\n## >>> rows=db(db.mytable.myfield=='value').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n\nfrom datetime import datetime\n\ntextdb = DAL('google:datastore+ndb')\n\ndb.define_table('tr_user',\n                Field('user_id', db.auth_user),\n                Field('name'),\n                Field('joined', 'datetime'),\n                #Field('bio', 'text'),\n                Field('email'),\n                Field('topic', 'reference topics')\n                #Field('user_active', 'boolean'),\n                #Field('on_top_page', 'boolean')\n                )\ndb.tr_user.joined.default = datetime.utcnow()\ndb.tr_user.joined.readable = db.tr_user.joined.writable = False\n\ndb.define_table('topics',\n                Field('name'),\n                Field('subtopic')\n                )\n\ndb.define_table('papers',\n                Field('title'),\n                Field('author'),\n                Field('topic', 'reference topic'),\n                Field('abstract', 'text'),\n                Field('summary', 'text')\n                )\n\ndb.define_table('reviews',\n                Field('date', 'datetime', default=datetime.utcnow()),\n                Field('reviewer', 'reference tr_user'),\n                Field('grade', 'int'),\n                Field('review_content', 'text')\n                )\n\n\ntextdb.define_table('long_text',\n                Field('abstract', 'text'),\n                Field('summary', 'text'),\n                Field('review', 'text')\n                )\n\ndb.papers.abstract.represent = lambda v, r: textdb.long_text(v).abstract\ndb.papers.summary.represent = lambda v, r: textdb.long_text(v).summary\ndb.papers.review.represent = lambda v, r: textdb.long_text(v).review\n\ndef edit():\n    r = db.mytable(request.args(0))\n    old_text_id = int(r.mytext) if r is not None else None\n    form = SQLFORM(record=r)\n    #if form.process(onvalidation=my_validator(old_text_id)).accepted:\n        #redirect(wherever)\n    return dict(form=form)\n\ndb.define_table('mytable',\n    Field('mytext', 'text'),\n)\n\ntextdb.define_table('texttable',\n    Field('textval', 'text')\n)\n\n\ndb.mytable.mytext.represent = lambda v, r: textdb.texttable(v).textval\n\n\ndef my_validator(old_text_id):\n    def validate(form):\n        if old_text_id is None:\n            # We need to insert.\n            i = textdb.texttable.insert(textval = form.vars.mytext)\n            form.vars.mytext = str(i)\n        else:\n            # We need to replace.\n            textdb(textdb.texttable.id == int(old_text_id)).update(textval = form.vars.mytext)\n            form.vars.mytext = str(old_text_id)\n        return form\n\n\ndef edit():\n    r = db.mytable(request.args(0))\n    old_text_id = int(r.mytext) if r is not None else None\n    form = SQLFORM(record=r)\n    #if form.process(onvalidation=my_validator(old_text_id)).accepted:\n        #redirect(wherever)\n    return dict(form=form)\n\n\n\n#db.messages.board.readable = db.messages.board.writable = False\n\n\n\n\n"
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/will/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/will/web2py/applications/true_review/models/tables.py", line 20, in <module>\n    textdb = DAL(\'google:datastore+ndb\')\n  File "/home/will/web2py/gluon/packages/dal/pydal/base.py", line 174, in __call__\n    obj = super(MetaDAL, cls).__call__(*args, **kwargs)\n  File "/home/will/web2py/gluon/packages/dal/pydal/base.py", line 424, in __init__\n    raise SyntaxError("Error in URI \'%s\' or database not supported" % self._dbname)\nSyntaxError: Error in URI \'google:datastore\' or database not supported\n'
p11
s.