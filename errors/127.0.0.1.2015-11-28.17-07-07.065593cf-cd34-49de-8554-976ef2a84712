(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> "
p3
sS'layer'
p4
S'/home/will/web2py/applications/true_review/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\n#@auth.requires_login()\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n\n\n\n    logger.info("Here we are, in the controller.")\n    response.flash = T("Hello World")\n    return dict(message=T(\'Welcome to web2py!\'))\n    """\n\n\n    #board_list = db().select(db.boards.ALL)\n\n    #board_list = db().select(db.boards.ALL, orderby=~db.boards.last_updated)\n    #return dict(board_list=board_list, recent_posts=recent_posts)\n\n    tr_users = db().select(db.tr_user.ALL)\n    topic_list = db().select(db.topics.ALL)\n    return dict(tr_users=tr_users, topic_list=topic_list)\n\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user, _class=\'boardtitle\'/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\ndef review_paper():\n    return dict()\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\ndef reset():\n  db(db.posts.id > 0).delete()\n  db(db.boards.id > 0).delete()\n\ndef paper_list():\n    my_topic = db.topics(request.args(0))\n    if my_topic is None:\n        session.flash = T("No such board")\n        redirect(URL(\'default\', \'index\'))\n    list = db().select(db.papers.ALL, orderby=~db.posts.post_created_on)\n    post_list = []\n    for p in list:\n        #if p.board == my_board[0].id:\n        if p.board == my_topic.id:\n            post_list.append(p)\n    return dict(paper_list=post_list)\n\ndef new_paper():\n    form = SQLFORM(db.papers)\n    if form.process(). accepted:\n        session.flash = T("Added topic")\n        redirect(URL(\'default\', \'index\'))\n    return dict(form=form)\n\n#@auth.requires_login()\ndef new_topics():\n    form = SQLFORM(db.topics)\n    if form.process(). accepted:\n        session.flash = T("Added topic")\n        redirect(URL(\'default\', \'index\'))\n    return dict(form=form)\n\n@auth.requires_login()\n@auth.requires_signature()\ndef new_post():\n    # Not necessary but a good idea.\n    board = db.boards(request.args(0))\n    if board is None:\n        session.flash = T("No such board")\n        redirect(URL(\'default\', \'index\'))\n    form = SQLFORM(db.posts)\n    now = datetime.utcnow()\n    if form.process().accepted:\n        form.vars.post_created_on = now\n        board.last_updated = now\n        board.update_record()\n        try:\n            db.commit()\n        except Exception, e:\n            logger.warning("Transaction commit failed while updating board time")\n        else:\n            session.flash = T("Added post")\n            redirect(URL(\'default\', \'posts\', args=[request.args(0)]))\n\n    return dict(form=form)\n\ndef posts():\n    my_board = db.boards(request.args(0))\n    if my_board is None:\n        session.flash = T("No such board")\n        redirect(URL(\'default\', \'index\'))\n    #my_board = db(db.boards.id == request.args(0)).select()\n    pre_post_list = db().select(db.posts.ALL, orderby=~db.posts.post_created_on)\n    post_list = []\n    for p in pre_post_list:\n        #if p.board == my_board[0].id:\n        if p.board == my_board.id:\n            post_list.append(p)\n    edit_button = A(\'Edit\', icon_edit, _href=URL(\'default\', \'edit_post\', args=[db.posts.id]))\n    return dict(post_list=post_list, my_board=my_board)\n\n@auth.requires_login()\n@auth.requires_signature()\ndef edit_post():\n    my_post = db.posts(request.args(0))\n    if my_post is None:\n        session.flash = T("No such post")\n        redirect(URL(\'default\', \'index\'))\n    form = SQLFORM(db.posts, record=my_post)\n    if form.process(). accepted:\n        session.flash = T("Post edited")\n        redirect(URL(\'default\', \'index\'))\n    return dict(form=form)\n\n@auth.requires_login()\n@auth.requires_signature()\ndef delete_post():\n    db(db.posts.id == request.args(0)).delete()\n    session.flash = T("Post deleted")\n    redirect(URL(\'default\', \'index\'))\n\ndef recent_posts(bid):\n    from datetime import datetime, timedelta\n    now = datetime.utcnow()\n    yesterday = now - timedelta(days=1)\n    pre_post_list = db(db.posts.post_created_on > yesterday).select()\n    post_list = []\n    for p in pre_post_list:\n        if p.board == bid:\n            post_list.append(p)\n    return len(post_list)\n\nresponse._vars=response._caller(paper_list)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/will/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/will/web2py/applications/true_review/controllers/default.py", line 181, in <module>\n  File "/home/will/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/will/web2py/applications/true_review/controllers/default.py", line 88, in paper_list\n    list = db().select(db.papers.ALL, orderby=~db.posts.post_created_on)\n  File "/home/will/web2py/gluon/packages/dal/pydal/base.py", line 906, in __getattr__\n    return super(DAL, self).__getattr__(key)\n  File "/home/will/web2py/gluon/packages/dal/pydal/helpers/classes.py", line 30, in __getattr__\n    raise AttributeError\nAttributeError\n'
p11
s.